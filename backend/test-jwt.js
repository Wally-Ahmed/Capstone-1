const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const crypto = require('crypto');

const secretKey = 'secretKey'; // Ensure this matches your application's secret key

// Example function to generate a token
function generateToken() {
    const payload = {
        id: '05779c8d-ceb2-4618-8039-09b0e89e91eb',
        iat: Math.floor(Date.now() / 1000),
        code: crypto.randomBytes(16).toString('hex')
    };
    return jwt.sign(payload, secretKey, { expiresIn: '3h' });
}

// Example token generated by the above function
const token = generateToken();

async function verifyToken(token) {
    try {
        // Decode the token without verification
        const decodedToken = jwt.decode(token);
        console.log('Decoded Token without verification:', decodedToken);

        if (!decodedToken) {
            throw new Error('Invalid token structure');
        }

        // Verify the token
        const decoded = jwt.verify(token, secretKey);
        console.log('Decoded Token with verification:', decoded);

        // Simulate fetching the hashed token from the database
        const token_hash = await bcrypt.hash(token, 3); // Simulate stored hash
        const matchStore = await bcrypt.compare(token, token_hash);
        if (!matchStore) {
            throw new Error('Token mismatch');
        }

        console.log('Token is valid and matches the stored hash');
    } catch (err) {
        console.error('Error:', err);
    }
}

// Test the token verification
verifyToken(token);
